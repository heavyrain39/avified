---

## Avified. - 무료 AVIF 변환기 웹사이트 기획서 (v1.1 - 1차 완성 버전)

### 1. 프로젝트 개요 (Introduction & Overview)

*   **프로젝트명:** Avified. (에이비파이드 점)
*   **프로젝트 성격:** 성공적으로 배포 및 운영 중인 **Webplified.(heavyrain39.github.io/webplified/)의 공식 자매 프로젝트**
*   **슬로건:** "차세대 이미지 포맷 AVIF로, 가장 빠르고 안전하게!"
*   **목표:** Webplified의 성공적인 아키텍처와 사용자 경험을 계승하여, PNG 및 JPG 이미지를 차세대 고효율 이미지 포맷인 AVIF로, 또는 AVIF를 다시 PNG/JPG로 변환하는 웹 기반 도구를 제공합니다. Webplified와 마찬가지로 모든 이미지 처리 과정은 **사용자의 웹 브라우저(클라이언트 사이드)에서만 진행**되어 서버 의존성이 없으며, **사용자 개인 정보 보호 및 파일 보안을 최우선**으로 합니다.
*   **핵심 가치:** 🚀 **초고속 & 끊김 없는 성능**, ✨ **아름답고 직관적인 UI/UX**, 🔒 **절대적인 보안** (Zero-Server 처리), 🔄 **양방향 변환 지원**, 💲 **완전 무료**
*   **개발 결과:** WebP가 웹 최적화의 표준으로 자리 잡았지만, 이제는 더 뛰어난 압축률과 품질을 제공하는 AVIF가 차세대 표준으로 주목받고 있습니다. 기존 Webplified 사용자와 신규 사용자 모두에게 익숙하고 신뢰할 수 있는 환경에서 AVIF 변환의 이점을 누릴 수 있도록, 검증된 코드베이스를 활용하여 빠르고 안정적인 서비스를 신속하게 구축했습니다.
*   **기반 기술 및 개발 내용 (Webplified로부터 계승 및 개선):**
    *   **UI/UX (재사용 및 개선):**
        *   Webplified v3.1에서 검증된 주요 페이지 레이아웃, 3가지 컬러 테마, 다국어(4개) 지원 시스템, 파일 목록 및 결과 UI, 토스트 알림, 반응형 디자인 등 대부분의 시각적 요소와 상호작용 로직을 **그대로 재사용**했습니다.
        *   Webplified의 성공적인 UX 철학인 **점진적 정보 공개(Progressive Disclosure)**를 동일하게 적용하여 사용자 집중도를 높였습니다.
        *   로고 클릭 및 모드 변경 시 적용되는 명확한 **소프트/하드 리셋 정책**을 그대로 유지했습니다.
        *   변환 중 화면 중앙에 고정되는 로딩 UI와 배경 스크롤을 허용하여 **'답답함 없는' 대기 경험**을 동일하게 제공합니다.
        *   **(개선)** 메인 화면 상단에 **'PNG/JPG → AVIF'**와 **'AVIF → PNG/JPG'** 두 개의 명확한 변환 카드를 분리 배치하여, 사용자가 자신의 목표를 즉시 선택하고 작업을 시작할 수 있도록 UX를 개선했습니다.
    *   **핵심 기능 (재사용 및 교체):**
        *   **파일 업로드 및 관리:** 드래그 앤 드롭, 다중 파일 선택, 목록 관리(개별 삭제, 순서 변경) 등 파일 핸들링 로직 전체를 재사용했습니다.
        *   **이미지 변환 로직 (완전 교체):** Webplified의 WebP 변환 워커를 **AVIF 인코딩/디코딩이 가능한 새로운 워커(`converter.worker.js`)로 성공적으로 교체**했습니다. 이를 위해 WebAssembly(WASM) 기반의 **`@jsquash/avif`** 라이브러리를 통합했습니다.
        *   **결과 처리 및 다운로드:** 결과 목록 표시, 개별/전체(JSZip.js) 다운로드, 원본-변환본 비교 슬라이더, 파일명 커스터마이징 기능은 **수정 없이 그대로 재사용**했습니다.
    *   **수익화 및 기타 (재사용):**
        *   Buy Me a Coffee / PayPal을 활용한 하이브리드 후원 시스템을 동일하게 적용했습니다.
        *   URL 쿼리 파라미터를 통한 언어별 직접 접근 기능(`?lang=ko`)을 동일하게 지원합니다.
        *   **(추가)** 소개글 하단에 자매 프로젝트인 Webplified 링크를 추가하여 교차 홍보 기반을 마련했습니다.

### 2. 프로젝트 목표 (Project Goals & Objectives)

*   **주요 목표 (달성 완료):**
    *   **최고 수준의 클라이언트 사이드 변환:** PNG, JPG, AVIF 간 양방향 변환 시, WebP보다 더 우수한 압축률로 파일 크기를 극적으로 줄이면서도 원본 품질을 최대한 보존하는 기능을 구현했습니다. PNG의 투명도(알파 채널) 역시 AVIF에서 완벽하게 지원됩니다.
    *   **압도적인 사용자 경험:** Webplified에서 검증된 초고속 변환 속도, 3가지 컬러 테마, 직관적인 UI 흐름을 제공하며, 여기에 더해 **보다 명확해진 변환 모드 선택 UI와 끊김 없는 작업 흐름**을 통해 사용성을 한 단계 끌어올렸습니다.
    *   **확고한 개인 정보 및 파일 보안:** 모든 이미지 처리 과정이 100% 사용자의 브라우저 내에서만 이루어짐을 명확히 강조합니다.
    *   **효율적인 대량 처리:** 최대 100개 파일의 일괄 변환, 자동 압축 다운로드, 파일명 커스터마이징 기능을 안정적으로 제공합니다.
*   **보조 목표 (달성 완료):**
    *   글로벌 접근성 강화 (4개 국어 및 URL 파라미터 지원, UI 텍스트 완전 현지화).
    *   Webplified와 Avified 간의 교차 홍보를 위한 링크 추가.
    *   (고려사항) 서비스 안정화 이후 광고 수익 창출 고려.

### 3. 대상 사용자 (Target Audience)

*   **핵심 대상:** 최신 웹 기술 트렌드에 민감하고, 극한의 이미지 최적화를 추구하는 글로벌 웹 개발자, 디자이너, 고품질 콘텐츠 크리에이터.
*   **사용자 요구 반영:** Webplified의 모든 장점(간편함, 속도, 보안, 일괄처리, UI)에 더해, 현존 최고 효율의 이미지 포맷인 AVIF를 손쉽게 다룰 수 있는 기능을 제공합니다.

### 4. 핵심 기능 (Core Features)

#### 4.1. 파일 업로드 및 관리
*   **개선된 UI:** 드래그 앤 드롭 및 파일 선택 버튼을 양방향 변환 모드별로 명확히 분리 제공.
*   변환 후보 목록 (썸네일, 파일명, 크기, 개별 제거) 및 드래그 앤 드롭 순서 변경 기능.
*   최대 100개 파일, 각 20MB 제한 및 관련 오류 처리 로직.
*   **안정성 강화:** 두 종류 이상의 파일(예: PNG와 AVIF)이 섞이지 않도록 방어 로직과 명확한 토스트 알림 추가.

#### 4.2. 이미지 형식 변환
*   Web Worker 기반 PNG/JPG ↔ AVIF 양방향 변환.
*   AVIF 대상 품질 조절 슬라이더. (AVIF → PNG 변환 시에는 비활성화 처리)
*   'AVIF → PNG/JPG' 변환 시, 출력 포맷(PNG/JPG)을 선택할 수 있는 전용 UI 제공.
*   변환 중 로딩 UI (화면 중앙 고정, 진행률 바, 배경 스크롤 허용).

#### 4.3. 변환 결과 및 다운로드
*   결과 목록: 변환된 파일의 썸네일, 새 파일명, 변환 후 크기, 용량 절감률, 개별 다운로드 버튼 표시.
*   일괄 압축 다운로드: `JSZip.js` 활용.
*   파일명 커스터마이징: 4가지 규칙(원본명 유지, 접두어/접미어 추가, 자동 번호 매기기) 제공 및 완전 현지화.
*   원본-변환본 비교 슬라이더 기능.

#### 4.4. 사용자 인터페이스 제어 및 상태 관리
*   **개선된 작업 흐름:** 변환 결과가 표시된 상태에서 새로운 파일을 추가하면, 기존 결과를 자동으로 비우고 새로운 변환 세션을 시작하여 페이지 새로고침 없이 자연스러운 연속 작업이 가능.
*   **점진적 정보 공개:** Webplified와 동일한 UX 전략 적용.
*   **리셋 정책:** Webplified와 동일한 소프트/하드 리셋 정책 적용.
*   **언어 및 테마 설정 유지:** `localStorage`를 통해 사용자의 마지막 언어와 테마 설정을 기억함.

### 5. 기술 아키텍처 및 구현 방안

*   **유형:** 스태틱 웹 애플리케이션 (백엔드 없음).
*   **프론트엔드 기술 스택:** HTML5, CSS3, JavaScript (ES6+ Modules).
*   **모듈 구성:** `main.js`, `ui.js`, `fileHandler.js`, `translations.js`, **`converter.worker.js` (AVIF 엔진, 개발 완료)**.
*   **핵심 아키텍처 원칙 (계승):**
    *   **단방향 데이터 흐름:** `main.js`의 중앙 상태 관리를 중심으로 한 예측 가능한 앱 구조.
    *   **역할과 책임 분리:** 각 모듈(main, ui, fileHandler, worker)의 역할은 Webplified와 동일하게 유지. `converter.worker.js`는 무거운 AVIF 인코딩/디코딩 작업을 전담.
*   **라이브러리:**
    *   `JSZip.js` (CDN, 압축 다운로드용).
    *   **`@jsquash/avif` (로컬, 핵심 변환 로직용, 신규 도입 완료).**
*   **`localStorage`:** 언어 및 컬러 테마 설정 저장.
*   **호스팅:** GitHub Pages.

### 6. 사용자 인터페이스 (UI) / 사용자 경험 (UX)

*   **디자인 원칙:** Webplified에서 검증된 미학적 미니멀리즘, 직관성, 반응형 디자인 원칙을 그대로 따름.
*   **핵심 UX 전략:** Webplified의 성공적인 UX 흐름(최초 진입 시 집중 → 파일 추가 시 기능 노출 → 명확한 리셋 → 답답함 없는 대기)을 그대로 이식했으며, 여기에 **더욱 직관적인 초기 진입점과 끊김 없는 연속 작업 흐름을 추가하여 사용성을 한 단계 더 개선함.**

### 7. 수익화 전략

*   **주요 수익원 (장기적 고려):** Google AdSense.
*   **자발적 후원/기부 (하이브리드 전략):**
    *   **구현 방식 (언어별 분기 처리):**
        *   **한국어 모드:** **Buy Me a Coffee** 링크 사용.
        *   **영어, 스페인어, 포르투갈어 모드:** **PayPal.Me 링크** 사용.

### 8. 차별화 전략

*   🚀 **Web Worker와 WASM 기반의 압도적인 AVIF 변환 성능.**
*   ✨ **이미 시장에서 검증되고, 한 단계 더 발전된 미학적이고 몰입감 있는 UI/UX.**
*   🔄 **완벽하고 직관적인 AVIF 양방향 변환 지원.**
*   🔒 **절대적인 데이터 프라이버시 (Zero-Server).**
*   🧠 **사용자 행동을 예측하는 스마트한 UI/UX 흐름 (점진적 정보 공개, 명확한 리셋, 끊김 없는 연속 작업).**
*   🤝 **성공적으로 검증된 Webplified의 자매 프로젝트로서의 신뢰성 및 교차 홍보.**

### 9. 계승하는 기술적 자산 및 교훈 (From Webplified)

*   **드래그 앤 드롭 기능 안정성 확보:** Webplified 개발 과정(v2.2)에서 `innerHTML`과 이벤트 리스너 충돌 문제를 해결하며 확립한 단방향 데이터 흐름 아키텍처는 Avified 개발의 안정성을 보장하는 핵심 자산임. 이 교훈을 통해 초기 개발 단계부터 안정적인 이벤트 처리가 가능했음.
*   **확립된 UI/UX 철학:** Webplified v3.1에서 최종적으로 정립된 '점진적 정보 공개'와 '명확한 리셋 정책'은 사용자 경험의 시행착오를 줄여줌. Avified는 이 검증된 철학을 그대로 적용하여, 기획 및 설계 단계의 리소스를 절약하고 곧바로 핵심 기능 개발 및 UX 개선에 집중할 수 있었음.

---

### **10. 프로젝트 현황 및 향후 과제 (v1.1 기준)**

#### **10.1. 1.0 버전 개발 완료 및 주요 성과**

프로젝트는 초기 기획 단계의 모든 목표를 성공적으로 달성했으며, 특히 사용성 측면에서 Webplified를 뛰어넘는 여러 개선을 이루어내어 **안정적인 1.0 버전 출시(릴리즈) 준비를 완료**한 상태입니다.

*   **핵심 엔진 교체 완료:** 기존 WebP 엔진을 제거하고, `@jsquash/avif` 라이브러리 기반의 새로운 AVIF 변환 워커를 성공적으로 탑재하여 **안정적인 양방향 변환 기능을 확보**했습니다.
*   **직관적인 UX 구조 확립:** 메인 화면에 **두 개의 명확한 변환 카드 UI**를 도입하여 사용자가 어떤 변환을 원하는지 즉시 선택하고 작업을 시작할 수 있도록 개선했습니다.
*   **끊김 없는 작업 흐름 완성:** 변환 결과가 표시된 상태에서 다른 종류의 파일을 추가하더라도, **페이지 새로고침 없이 자동으로 목록을 초기화하고 새로운 변환 세션을 시작**하도록 하여 사용자의 불편함을 완벽하게 제거했습니다.
*   **현지화 완성도 향상:** 접두어/접미어 입력란의 예시 텍스트와 같이 하드코딩 되어 있던 부분을 포함, **UI의 모든 텍스트를 4개 국어로 완벽하게 현지화**했습니다.
*   **안정성 강화:** 서로 다른 종류의 파일을 한 목록에 추가하려는 시도를 막는 **방어 로직과 명확한 토스트 알림을 추가**하여 앱의 안정성을 높였습니다.
*   **브랜드 자산 관리:** `README.md`, `sitemap.xml`, `index.html`의 메타 태그 등 프로젝트의 **모든 외부 노출 콘텐츠를 Avified 브랜드에 맞게 통일**했습니다.

#### **10.2. 배포 및 후속 조치 (Deployment & Follow-up)**

*   **[진행중] GitHub Pages 배포:** 모든 테스트를 통과한 최종 버전의 코드를 GitHub Pages를 통해 정식 배포합니다. (URL: `https://heavyrain39.github.io/avified/`)
*   **[예정] 시연 자료 제작:** `README.md`에 추가할, 실제 작동 모습을 담은 고화질의 GIF 애니메이션을 제작합니다. 이는 프로젝트의 완성도를 시각적으로 증명하는 가장 효과적인 방법입니다.
*   **[예정] 개발 회고록 작성:** 개인 블로그나 기술 커뮤니티에 'Webplified 개발자가 LLM과 함께 4시간 만에 AVIF 변환기를 만든 과정'과 같은 상세한 후기를 작성하여, 프로젝트의 기술적 가치와 개발 스토리를 공유합니다.
*   **[예정] 커뮤니티 홍보:** 국내외 개발자 커뮤니티(OKKY, Reddit, Hacker News 등) 및 디자인 커뮤니티에 언어별 URL 파라미터(`?lang=ko` 등)를 활용하여 타겟화된 홍보를 진행합니다.

#### **10.3. 장기 로드맵 (Long-term Roadmap)**

*   **[권장] 변환 실패 항목에 대한 시각적 피드백 제공:**
    *   **현황:** 현재는 변환에 실패한 파일이 있을 경우 토스트 알림만 표시되고 결과 목록에서는 사라집니다.
    *   **개선 과제:** 사용자가 어떤 파일이 왜 실패했는지 직관적으로 알 수 있도록, 결과 목록에 **실패한 항목도 회색으로 표시하고, 파일명 아래에 간단한 에러 메시지를 보여주는 기능**을 추가합니다. 이를 통해 사용자 경험의 완성도를 더욱 높일 수 있습니다.

*   **[고려] 사용자 피드백 수집 및 반영:**
    *   정식 배포 후, 사용자의 피드백을 받을 수 있는 채널(예: GitHub Issues)을 활성화하고, 수집된 의견을 바탕으로 사용성을 지속적으로 개선합니다.

*   **[고려] 고급 기능 추가 검토:**
    *   AVIF 포맷의 추가적인 인코딩 옵션(예: 무손실 압축, 색 공간 설정, 변환 속도 조절 등)을 사용자가 직접 제어할 수 있는 '고급 설정' 기능을 기획하고 기술적 가능성을 검토합니다.

*   **[장기] 수익화 모델 적용:**
    *   트래픽이 안정적으로 발생할 경우, 현재의 자발적 후원 모델 외에 Google AdSense 등 광고 모델 도입을 고려합니다.

[문서 종료]



---

## Avified. - 무료 AVIF 변환기 웹사이트 기획서 (v1.0 - 신규 기획)

### 1. 프로젝트 개요 (Introduction & Overview)

*   **프로젝트명:** Avified. (에이비파이드 점)
*   **프로젝트 성격:** 성공적으로 배포 및 운영 중인 **Webplified.(heavyrain39.github.io/webplified/)의 공식 자매 프로젝트**
*   **슬로건:** "차세대 이미지 포맷 AVIF로, 가장 빠르고 안전하게!"
*   **목표:** Webplified의 성공적인 아키텍처와 사용자 경험을 계승하여, PNG 및 JPG 이미지를 차세대 고효율 이미지 포맷인 AVIF로, 또는 AVIF를 다시 PNG/JPG로 변환하는 웹 기반 도구를 제공합니다. Webplified와 마찬가지로 모든 이미지 처리 과정은 **사용자의 웹 브라우저(클라이언트 사이드)에서만 진행**되어 서버 의존성이 없으며, **사용자 개인 정보 보호 및 파일 보안을 최우선**으로 합니다.
*   **핵심 가치:** 🚀 **초고속 & 끊김 없는 성능**, ✨ **아름답고 직관적인 UI/UX**, 🔒 **절대적인 보안** (Zero-Server 처리), 🔄 **양방향 변환 지원**, 💲 **완전 무료**
*   **기획 의도:** WebP가 웹 최적화의 표준으로 자리 잡았지만, 이제는 더 뛰어난 압축률과 품질을 제공하는 AVIF가 차세대 표준으로 주목받고 있습니다. 기존 Webplified 사용자와 신규 사용자 모두에게 익숙하고 신뢰할 수 있는 환경에서 AVIF 변환의 이점을 누릴 수 있도록, 검증된 코드베이스를 활용하여 빠르고 안정적인 서비스를 신속하게 구축하고자 합니다.
*   **기반 기술 및 개발 계획 (Webplified로부터 계승):**
    *   **UI/UX (재사용):**
        *   Webplified v3.1에서 검증된 주요 페이지 레이아웃, 3가지 컬러 테마, 다국어(4개) 지원 시스템, 파일 목록 및 결과 UI, 토스트 알림, 반응형 디자인 등 모든 시각적 요소와 상호작용 로직을 **그대로 재사용**합니다.
        *   파일 추가 시 관련 기능이 나타나는 **점진적 정보 공개(Progressive Disclosure) UX 철학**을 동일하게 적용하여 사용자 집중도를 높입니다.
        *   로고 클릭 및 모드 변경 시 적용되는 명확한 **소프트/하드 리셋 정책**을 그대로 유지합니다.
        *   변환 중 화면 중앙에 고정되는 로딩 UI와 배경 스크롤을 허용하여 **'답답함 없는' 대기 경험**을 동일하게 제공합니다.
    *   **핵심 기능 (재사용 및 일부 수정):**
        *   **파일 업로드 및 관리:** 드래그 앤 드롭, 다중 파일 선택, 목록 관리(전체/개별 삭제, 순서 변경) 등 파일 핸들링 로직 전체를 재사용합니다.
        *   **이미지 변환 로직 (교체 대상):** Webplified의 WebP 변환 워커(`converter.worker.js`)를 **AVIF 인코딩/디코딩이 가능한 새로운 워커(`avif.worker.js`)로 교체**하는 것이 이 프로젝트의 핵심 개발 과제입니다. WebAssembly(WASM) 기반의 AVIF 라이브러리(예: `@squoosh/avif`)를 통합해야 합니다.
        *   **결과 처리 및 다운로드:** 결과 목록 표시, 개별/전체(JSZip.js) 다운로드, 원본-변환본 비교 슬라이더, 파일명 커스터마이징 기능은 **수정 없이 그대로 재사용**합니다.
    *   **수익화 및 기타 (재사용):**
        *   Buy Me a Coffee / PayPal을 활용한 하이브리드 후원 시스템을 동일하게 적용합니다.
        *   URL 쿼리 파라미터를 통한 언어별 직접 접근 기능(`?lang=ko`)을 동일하게 지원합니다.

### 2. 프로젝트 목표 (Project Goals & Objectives)

*   **주요 목표:**
    *   최고 수준의 클라이언트 사이드 변환: PNG, JPG, AVIF 간 양방향 변환 시, WebP보다 더 우수한 압축률로 파일 크기를 극적으로 줄이면서도 원본 품질을 최대한 보존. PNG의 투명도(알파 채널)를 AVIF에서 완벽하게 지원.
    *   압도적인 사용자 경험: Webplified에서 검증된 초고속 변환 속도, 3가지 컬러 테마, 직관적인 UI 흐름을 그대로 제공.
    *   확고한 개인 정보 및 파일 보안: 모든 이미지 처리 과정이 100% 사용자의 브라우저 내에서만 이루어짐을 명확히 강조.
    *   효율적인 대량 처리: 최대 100개 파일의 일괄 변환, 자동 압축 다운로드, 파일명 커스터마이징 기능 제공.
*   **보조 목표:**
    *   글로벌 접근성 강화 (4개 국어 및 URL 파라미터 지원).
    *   Webplified와 Avified 간의 교차 홍보를 통해 시너지 창출.
    *   서비스 안정화 이후 광고 수익 창출 고려.

### 3. 대상 사용자 (Target Audience)

*   **핵심 대상:** 최신 웹 기술 트렌드에 민감하고, 극한의 이미지 최적화를 추구하는 글로벌 웹 개발자, 디자이너, 고품질 콘텐츠 크리에이터.
*   **사용자 요구 반영:** Webplified의 모든 장점(간편함, 속도, 보안, 일괄처리, UI)에 더해, 현존 최고 효율의 이미지 포맷인 AVIF를 손쉽게 다룰 수 있는 기능.

### 4. 핵심 기능 (Core Features)

#### 4.1. 파일 업로드 및 관리
*   드래그 앤 드롭 및 파일 선택 버튼, 모드별 확장자 필터링 (PNG/JPG ↔ AVIF).
*   변환 후보 목록 (썸네일, 파일명, 크기, 개별 제거).
*   드래그 앤 드롭 순서 변경 기능.
*   최대 100개 파일, 각 20MB 제한.

#### 4.2. 이미지 형식 변환
*   Web Worker 기반 PNG/JPG ↔ AVIF 양방향 변환.
*   AVIF 대상 품질 조절 슬라이더. (AVIF 설정에 따라 '속도' 등 추가 옵션 제공 가능성 검토)
*   변환 중 로딩 UI (화면 중앙 고정, 진행률 바, 배경 스크롤 허용).

#### 4.3. 변환 결과 및 다운로드
*   결과 목록: 변환된 파일의 썸네일, 새 파일명, 변환 후 크기, 용량 절감률, 개별 다운로드 버튼 표시.
*   일괄 압축 다운로드: `JSZip.js` 활용.
*   파일명 커스터마이징: 4가지 규칙(원본명 유지, 접두어/접미어 추가, 자동 번호 매기기) 제공.
*   원본-변환본 비교 슬라이더 기능.

#### 4.4. 사용자 인터페이스 제어 및 상태 관리
*   **점진적 정보 공개:** Webplified와 동일한 UX 전략 적용.
*   **리셋 정책:** Webplified와 동일한 소프트/하드 리셋 정책 적용.
*   **언어 및 테마 설정 유지:** `localStorage`를 통해 사용자의 마지막 언어와 테마 설정을 기억함.

### 5. 기술 아키텍처 및 구현 방안

*   **유형:** 스태틱 웹 애플리케이션 (백엔드 없음).
*   **프론트엔드 기술 스택:** HTML5, CSS3, JavaScript (ES6+ Modules).
*   **모듈 구성:** `main.js`, `ui.js`, `fileHandler.js`, `translations.js`, **`avif.worker.js` (신규 개발)**.
*   **핵심 아키텍처 원칙 (계승):**
    *   **단방향 데이터 흐름:** `main.js`의 중앙 상태 관리를 중심으로 한 예측 가능한 앱 구조.
    *   **역할과 책임 분리:** 각 모듈(main, ui, fileHandler, worker)의 역할은 Webplified와 동일하게 유지. `avif.worker.js`는 무거운 AVIF 인코딩/디코딩 작업을 전담.
*   **라이브러리:**
    *   `JSZip.js` (CDN, 압축 다운로드용).
    *   **`@squoosh/avif` 등 WebAssembly 기반 AVIF 인코더/디코더 라이브러리 (핵심 변환 로직용, 신규 도입).**
*   **`localStorage`:** 언어 및 컬러 테마 설정 저장.
*   **호스팅:** GitHub Pages 등 정적 호스팅 서비스.

### 6. 사용자 인터페이스 (UI) / 사용자 경험 (UX)

*   **디자인 원칙:** Webplified에서 검증된 미학적 미니멀리즘, 직관성, 반응형 디자인 원칙을 그대로 따름.
*   **핵심 UX 전략: 점진적 정보 공개 (Progressive Disclosure)**
    *   Webplified의 성공적인 UX 흐름(최초 진입 시 집중 → 파일 추가 시 기능 노출 → 명확한 리셋 → 답답함 없는 대기)을 **변경 없이 그대로 이식**하여, 사용자에게 익숙하고 편안한 경험을 제공.

### 7. 수익화 전략

*   **주요 수익원 (장기적 고려):** Google AdSense.
*   **자발적 후원/기부 (하이브리드 전략):**
    *   **구현 방식 (언어별 분기 처리):**
        *   **한국어 모드:** **Buy Me a Coffee** 링크 사용.
        *   **영어, 스페인어, 포르투갈어 모드:** **PayPal.Me 링크** 사용.

### 8. 차별화 전략

*   🚀 **Web Worker와 WASM 기반의 압도적인 AVIF 변환 성능.**
*   ✨ **이미 시장에서 검증된, 미학적이고 몰입감 있는 UI/UX.**
*   🔄 **완벽한 AVIF 양방향 변환 지원.**
*   🔒 **절대적인 데이터 프라이버시 (Zero-Server).**
*   🧠 **사용자 행동을 예측하는 스마트한 UI/UX 흐름 (점진적 정보 공개 및 명확한 리셋 정책).**
*   🤝 **성공적으로 검증된 Webplified의 자매 프로젝트로서의 신뢰성.**

### 9. 계승하는 기술적 자산 및 교훈 (From Webplified)

*   **드래그 앤 드롭 기능 안정성 확보:** Webplified 개발 과정(v2.2)에서 `innerHTML`과 이벤트 리스너 충돌 문제를 해결하며 확립한 단방향 데이터 흐름 아키텍처는 Avified 개발의 안정성을 보장하는 핵심 자산임. 이 교훈을 통해 초기 개발 단계부터 안정적인 이벤트 처리가 가능.
*   **확립된 UI/UX 철학:** Webplified v3.1에서 최종적으로 정립된 '점진적 정보 공개'와 '명확한 리셋 정책'은 사용자 경험의 시행착오를 줄여줌. Avified는 이 검증된 철학을 그대로 적용하여, 기획 및 설계 단계의 리소스를 절약하고 곧바로 핵심 기능 개발에 집중할 수 있음.

### **10. 향후 진행 예정 (Next Steps) - (현재 상태 반영 업데이트)**

#### **1. 핵심 버그 해결 및 엔진 안정화 (Top Priority: Bug Fix & Engine Stabilization)**

현재 프로젝트는 기본 브랜딩 및 UI 구조 포팅을 완료하고, 핵심 기능인 AVIF 변환 엔진(`@jsquash/avif`)을 탑재했으나, 실제 변환 과정에서 원인 불명의 오류로 인해 실패하고 있는 중대한 단계에 머물러 있습니다. 따라서 다음 모든 단계에 앞서, 이 문제를 해결하는 것이 **최우선 과제**입니다.

*   **현재 증상 상세:**
    *   UI 상에서 PNG/JPG 파일을 선택하여 목록에 추가하는 것까지는 정상적으로 동작합니다.
    *   '모두 변환 시작!' 버튼을 클릭하면 변환 UI가 나타나지만, 진행률이 오르지 않고 잠시 후 "Error converting 'Conversion Worker': Unknown worker error" 라는 토스트 메시지가 나타나며 변환이 실패합니다.
    *   브라우저 개발자 콘솔에는 `main.js`의 `state.conversionWorker.onerror` 핸들러가 호출된 기록은 있으나, 정작 중요한 에러 메시지(`err.message`)는 `undefined`로 기록되어, 오류의 근본 원인을 직접적으로 파악하기 어려운 상황입니다.

*   **주요 추정 원인:**
    에러 메시지가 없는 것으로 보아, **Web Worker 내부의 스크립트 로딩 또는 초기화 과정에서 치명적인 오류가 발생**하여, 워커가 메인 스레드로 어떠한 상세 정보도 전달하지 못한 채 즉시 충돌(crash)하고 있습니다. 이는 다음 중 하나의 문제일 가능성이 매우 높습니다.
    1.  **내부 의존성 로드 실패:** `converter.worker.js`가 `import`하는 `@jsquash/avif` 라이브러리(`encode.js`, `decode.js`)가, 다시 내부적으로 또 다른 자바스크립트 파일(`utils.js`, `avif_enc.js` 등)이나 `.wasm` 바이너리 파일을 `import` 하려 할 때 경로 문제로 실패하는 경우입니다.
    2.  **WASM 모듈 초기화 실패:** `avif_enc.wasm` 또는 `avif_dec.wasm` 바이너리 파일 자체를 찾지 못하거나, 로드된 바이너리를 초기화하는 과정에서 오류가 발생하는 경우입니다.

*   **시도된 해결 방법 및 실패 기록:**
    1.  **CDN 방식:** `jsDelivr`, `unpkg`, `Skypack` 등 여러 CDN을 통해 라이브러리를 로드하려 시도했으나, 대부분의 CDN이 직접 사용 불가능한 메타 파일을 제공하거나 링크 자체가 불안정하여 모두 실패했습니다. **이 방식은 완전히 포기합니다.**
    2.  **로컬 라이브러리 방식:** CDN 의존성을 없애기 위해 `@jsquash/avif` 패키지 파일들을 `libs` 폴더에 직접 복사하여 사용하는 방식으로 전환했습니다. 하지만 이 과정에서도 다음과 같은 실패가 반복되었습니다.
        *   **1차 시도:** 핵심 `.wasm` 바이너리 파일과 JS 래퍼(`encode.js`, `decode.js`)만 복사하여, 내부 의존성 파일(`avif_enc.js` 등) 누락으로 실패.
        *   **2차 시도:** 필요한 모든 파일을 복사했으나, 워커 코드에 잘못된 `locateFile` 경로 설정 함수를 추가하여 라이브러리의 자체적인 WASM 로딩 메커니즘을 방해함으로써 실패.
        *   **3차 시도 (현재):** `locateFile` 설정을 제거하고 라이브러리의 기본 로딩 방식을 사용하도록 코드를 수정했음에도 여전히 동일한 'Unknown worker error'가 발생. 이는 `libs` 폴더 내 파일들 간의 상대 경로 참조에 아직까지 파악하지 못한 문제가 남아있음을 시사합니다.

*   **구체적인 해결 절차:**
    1.  **[1순위] 워커 오류 로깅 강화:** `converter.worker.js`의 최상단부터 `try...catch` 블록으로 감싸고, `catch` 블록에서 `error.stack`을 포함한 전체 오류 객체를 `postMessage`로 메인 스레드에 전달하도록 수정해야 합니다. 이를 통해 `undefined`가 아닌, 실제 오류의 원인이 담긴 상세 로그를 확보해야 합니다.
    2.  **[2순위] 단계별 모듈 로딩 검증:** `converter.worker.js` 내부에 `console.log` 또는 `postMessage` 로그를 추가하여, 각 `import` 문이 성공적으로 실행되는지, 그리고 `Promise.all([initEncode(), initDecode()])` Promise가 정상적으로 `resolve` 되는지를 단계별로 확인하여 어느 부분에서 실패하는지 정확히 찾아내야 합니다.
    3.  **[3순위] 파일 경로 재검증:** 워커 스크립트 내에서 사용하는 상대 경로(`./libs/`)가 웹 서버(Live Server 등) 환경에서 올바르게 해석되는지, 또는 절대 경로로 변경해야 하는지 등을 테스트합니다.
    4.  **[4순위] 라이브러리 코드 단순화:** 최후의 수단으로, `libs` 폴더 안의 `encode.js`와 `decode.js`가 내부적으로 `import`하는 `avif_enc.js`, `avif_dec.js` 등의 코드를 하나의 파일로 수동 병합(bundling)하여 의존성 구조 자체를 단순화하는 방법을 고려합니다.

#### **2. 기능 안정화 및 전체 회귀 테스트 (Feature Stabilization & Full Regression Testing)**

위의 핵심 버그가 해결된 후, 애플리케이션의 안정성을 보장하기 위한 전면적인 테스트를 수행합니다.

*   **양방향 변환 신뢰성 테스트:** PNG→AVIF, JPG→AVIF, AVIF→PNG, AVIF→JPG 네 가지 경로의 변환이 모두 성공하는지, 특히 PNG의 투명도(알파 채널)가 변환 후에도 완벽하게 유지되는지 집중적으로 테스트합니다.
*   **옵션 연동 테스트:** 품질 슬라이더와 파일명 규칙(접두어, 접미어, 번호 매기기) 설정이 실제 변환 결과물에 정확하게 반영되는지 검증합니다.
*   **크로스 브라우저 호환성 테스트:** Chrome, Firefox, Safari, Edge 최신 버전에서 모든 기능(파일 추가, 변환, 다운로드, UI 상호작용)이 일관되게 동작하는지 확인합니다. 특히 Safari는 WebAssembly 및 최신 이미지 포맷 지원에 있어 독자적인 특성을 보일 수 있으므로 별도의 주의가 필요합니다.
*   **엣지 케이스 및 부하 테스트:** 20MB에 근접하는 대용량 파일, 100개에 가까운 다수의 파일, 특수문자가 포함된 파일명 등 비정상적인 조건에서도 앱이 안정적으로 작동하는지 테스트합니다.

#### **3. 배포 및 홍보 준비 (Deployment & Marketing Preparation)**

기능 안정화가 완료되면, 프로젝트의 성공적인 공개를 위해 다음 항목들을 준비합니다.

*   **최종 빌드 및 배포:** 모든 테스트를 통과한 최종 버전의 코드를 GitHub Pages를 통해 정식 배포합니다.
*   **시연 자료 제작:** `README.md`에 추가할, 실제 작동 모습을 담은 고화질의 GIF 애니메이션을 제작합니다. 이는 프로젝트의 완성도를 시각적으로 증명하는 가장 효과적인 방법입니다.
*   **개발 회고록 작성:** 개인 블로그나 기술 커뮤니티에 'Webplified 개발자가 LLM과 함께 AVIF 변환기를 만든 과정'과 같은 상세한 후기를 작성하여, 프로젝트의 기술적 가치와 개발 스토리를 공유합니다.
*   **커뮤니티 홍보:** 국내외 개발자 커뮤니티(OKKY, Reddit, Hacker News 등) 및 디자인 커뮤니티에 언어별 URL 파라미터(`?lang=ko` 등)를 활용하여 타겟화된 홍보를 진행합니다.

#### **4. 장기 과제 (Long-term Roadmap)**

*   **사용자 피드백 수집 및 개선:** 정식 배포 후, 사용자의 피드백을 받을 수 있는 채널(예: GitHub Issues)을 활성화하고, 수집된 의견을 바탕으로 사용성을 지속적으로 개선합니다.
*   **고급 기능 추가 검토:** AVIF 포맷의 추가적인 인코딩 옵션(예: 무손실 압축, 색 공간 설정 등)을 사용자가 직접 제어할 수 있는 '고급 설정' 기능을 기획하고 기술적 가능성을 검토합니다.
*   **수익화 모델 적용:** 트래픽이 안정적으로 발생할 경우, 기부 모델 외에 Google AdSense 등 광고 모델 도입을 고려합니다.

[문서 종료]